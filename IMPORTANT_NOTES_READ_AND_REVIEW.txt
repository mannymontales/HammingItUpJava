Yes, you're describing a design principle known as "Constructor Validation" or "Constructor Preconditions." It's a good practice to validate the arguments and set up the initial state of an object within the constructor. This ensures that the object starts in a consistent and valid state, and any subsequent methods can rely on this assumption.

Here are the key points and benefits of this design principle:

Constructor Responsibility: The constructor's main responsibility is to establish the initial state of the object. This includes initializing fields, performing validations, and ensuring that the object is ready for use.

Validation: The constructor can perform validations on the input parameters to ensure they meet the necessary criteria. If the validations fail, an exception can be thrown, indicating that the object cannot be properly constructed.

Object Integrity: By performing validation in the constructor, you establish an expectation that the object will be in a valid state from the moment it's created. This can help prevent errors down the line and make the object more self-contained and self-consistent.

Encapsulation: Separating the validation logic in the constructor from the methods that modify the object's state enforces encapsulation. Methods can assume that the object's initial state is valid, which can simplify their logic.

Error Prevention: By catching invalid states early (i.e., during object construction), you prevent those invalid states from propagating and causing issues throughout the lifetime of the object.

Readability and Reliability: Constructors that validate their inputs improve the overall readability and reliability of the codebase. Developers using the class can trust that if an object is successfully constructed, it's in a valid state.

Consistency: When validation is centralized in the constructor, it ensures that every instance of the object goes through the same validation process, promoting consistency and reducing the chances of missed checks.

The combination of constructor validation and methods that rely on the validity of the object's initial state is a fundamental principle in object-oriented design.